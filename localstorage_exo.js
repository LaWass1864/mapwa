//   Fichier serviceWorker.js (installation + activation basique) 

// <!-- √âcouter l'installation du SW -->

self.addEventListener('______', event => { // indice: quand le SW est install√©
  console.log(' Service Worker install√©');
  self.skipWaiting( ); // indice: forcer √† prendre le contr√¥le imm√©diatement
});

// <!-- √âcouter l'activation du SW -->
self.addEventListener('______', event => { // indice: quand le SW devient actif
  console.log(' Service Worker activ√©');
  self.clients.______( ); // indice: prendre le contr√¥le des pages ouvertes
});

// <!-- ////////////////////////////////////////////////////////////////////
//  Fichier app.js (enregistrement du SW)
//   ///////////////////////////////////////-->

  // app.js

// üìå V√©rifie si le navigateur supporte les SW
if ('______' in navigator) { // indice: objet global pour g√©rer les SW

  // üìå Enregistre le SW quand la page est charg√©e
  window.addEventListener('______', () => { // indice: quand tout est pr√™t
    navigator.serviceWorker.______('serviceWorker.js') // indice: m√©thode pour l'enregistrer
      .then(reg => console.log('‚úÖ SW enregistr√©', reg))
      .catch(err => console.error('‚ùå Erreur SW', err));
  });
}

// Pour tester dans DevTools
// Aller dans Application > Service Workers

// Tu dois voir ton serviceWorker.js install√© et activ√©.

// Regarder la Console :
// ‚úÖ Service Worker install√©
// üöÄ Service Worker activ√©

// Concept n¬∞1 : CACHE STORAGE + OFFLINE

// 1Ô∏è‚É£ Cr√©er les variables globales dans serviceWorker.js
// ‚û° Elles d√©finissent le nom du cache et la liste des fichiers √† stocker.

// 2Ô∏è‚É£ Installer le cache au moment o√π le SW est install√©
// ‚û° Dans l‚Äôinstall, ouvrir le cache et ajouter tous les fichiers list√©s.

// 3Ô∏è‚É£ G√©rer le nettoyage du cache pendant l‚Äôactivation
// ‚û° Supprimer les anciens caches si on a chang√© le nom.

// 4Ô∏è‚É£ Servir les fichiers depuis le cache dans fetch
// ‚û° Pour fonctionner hors-ligne et acc√©l√©rer.

// 5Ô∏è‚É£ Tester dans DevTools > Application > Cache Storage

// Indice et aide dans ton serviceWorker.js

//  VARIABLES GLOBALES POUR LE CACHE
const staticCacheName = "______"; // indice: "donne un nom √† ton cache, ex: snack-track-v1"
const assets = [
  "./",
  "./index.html",
  "./style.css",
  // ... tes autres fichiers
];

// INSTALL : mettre en cache les fichiers

// üìå Quand le SW s'installe
self.addEventListener('______', event => { // indice: √©v√©nement qui se d√©clenche √† l'installation
  console.log('‚úÖ SW install√©');

  event.______(  // indice: attendre que la promesse finisse avant de finir l'install
    caches.______(staticCacheName) // indice: ouvrir un cache avec ce nom
      .then(cache => {
        console.log('üì¶ Mise en cache des assets');
        return cache.______(assets); // indice: ajoute TOUS les fichiers list√©s
      })
  );

  self.______( ); // indice: activer tout de suite le SW
});

// ACTIVATE : nettoyer les anciens caches

// Quand le SW devient actif
self.addEventListener('______', event => { // indice: activation
  console.log(' SW activ√©');

  event.waitUntil(
    caches.keys().then(keys => {
      return Promise.all(
        keys
          .filter(k => k !== staticCacheName) // garde seulement le cache actuel
          .map(k => caches.______(k)) // indice: supprime les vieux caches
      );
    })
  );

  self.clients.______( ); // indice: prend contr√¥le des pages imm√©diatement
});

//  FETCH : servir depuis le cache

// Intercepter les requ√™tes pour servir depuis le cache
self.addEventListener('fetch', event => {
  console.log('üõ∞ Fetch:', event.request.url);
  
  event.______( // indice: permet de renvoyer une r√©ponse custom
    caches.match(event.request) // cherche dans le cache
      .then(res => res || fetch(event.request)) // si pas trouv√©, va le chercher en ligne
  );
});

// comment tester sur devtools
// >Ouvre ta PWA, puis :

// Va dans Application > Cache Storage

// Tu dois voir un cache appel√© (le nom de ton application)

// Clique dessus ‚ûî tu dois voir tous tes fichiers index.html, style.css, etc.

// > Fais un test hors-ligne :

// Va dans Network > coche ¬´ Offline ¬ª

// Recharge la page ‚ûî ton site doit quand m√™me s‚Äôafficher.

// >Regarde aussi les log sur dans ta console :

