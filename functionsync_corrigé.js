/**
 * Fonction de synchronisation des participants
 * --------------------------------------
 * - Lit tous les participants stock√©s localement (via IndexedDB) qui n'ont pas encore √©t√© envoy√©s.
 * - Tente de les envoyer un par un √† l'API serveur via un POST JSON.
 * - Si succ√®s : supprime localement et notifie les autres pages.
 * - Si √©chec : garde en local et log l'erreur.
 * - √Ä la fin : affiche un r√©cap et notifie le client du r√©sultat global.
 */
async function syncSnacks() {
  console.log('üîÑ D√©but de la synchronisation...');

  try {
    // 1Ô∏è‚É£ R√©cup√®re la liste des participants en attente dans IndexedDB
    const pending = await getAllPending();
    console.log(`üìä ${pending.length} participants(s) √† synchroniser`);

    // Si aucun snack √† synchroniser, on s'arr√™te l√†
    if (pending.length === 0) {
      console.log('‚úÖ Aucun snack en attente');
      return;
    }

    // 2Ô∏è‚É£ Initialisation des compteurs et liste des √©checs
    let success = 0, fail = 0;
    const failedSnacks = [];

    // 3Ô∏è‚É£ Parcours de chaque snack √† synchroniser
    for (const snack of pending) {
      try {
        console.log('üöÄ Tentative de synchro pour :', snack.name);

        // D√©termination de l'URL API (par ex : http://localhost:3000/api/sync-snacks)
        const apiUrl = getApiUrl();
        console.log('üåê URL API utilis√©e:', apiUrl);

        // Envoi HTTP POST des donn√©es du participants au serveur
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            name: snack.name,
            mood: snack.mood,
            timestamp: snack.timestamp
          })
        });

        console.log('üìä R√©ponse serveur:', response.status, response.statusText);

        if (response.ok) {
          // ‚úÖ Si le serveur r√©pond 2xx, on consid√®re que c'est enregistr√©
          console.log('‚úÖ Snack synchronis√© :', snack.name);

          // On le supprime alors de la liste locale (IndexedDB)
          await deletePendingSnack(snack.id);

          // Et on notifie toutes les pages ouvertes (onglets) de la synchro
          await notifyClients('snack-synced', { snack });

          success++;
        } else {
          // ‚ùå Si le serveur r√©pond une erreur (ex : 500, 404), on logue l'erreur
          const errorText = await response.text().catch(() => 'Erreur inconnue');
          console.error(`‚ùå Erreur serveur ${response.status} pour : ${snack.name}`, errorText);

          // On garde en m√©moire les snacks en √©chec pour le rapport final
          failedSnacks.push({ snack: snack.name, error: `${response.status}: ${errorText}` });
          fail++;
        }

      } catch (err) {
        // ‚ùå Si erreur r√©seau (pas d'internet, DNS down, ou t'es dans le d√©sert.)
        console.error(`‚ùå Erreur r√©seau pour : ${snack.name}`, err.message);

        failedSnacks.push({ snack: snack.name, error: err.message });
        fail++;
      }
    }

    // 4Ô∏è‚É£ Fin de boucle : affichage du bilan global
    console.log(`üìà Sync termin√©e : ${success} succ√®s / ${fail} √©checs`);

    // Si certains snacks n'ont pas pu √™tre synchronis√©s, on le logue explicitement
    if (failedSnacks.length > 0) {
      console.log('‚ùå Snacks √©chou√©s:', failedSnacks);
    }

    // Notifie toutes les pages ouvertes que la synchronisation est termin√©e
    // en leur donnant les d√©tails des succ√®s et erreurs
    await notifyClients('sync-completed', { 
      success, 
      errors: fail, 
      failedSnacks: failedSnacks 
    });

  } catch (e) {
    //  Si tout plante d'un coup (ex : probl√®me IndexedDB)
    console.error('üí• Erreur globale dans syncSnacks :', e);

    // Notifie aussi les pages ouvertes qu'il y a eu une erreur globale
    await notifyClients('sync-error', { error: e.message });

    // Relance l'erreur pour que ce soit visible plus haut si besoin
    throw e;
  }
}

// NOUVELLE FONCTION : Gestion intelligente de l'URL API
function getApiUrl() {
  const currentUrl = new URL(self.location.href);
  
  // Environnement de d√©veloppement
  if (currentUrl.hostname === 'localhost' || currentUrl.hostname === '127.0.0.1') {
    return `${currentUrl.origin}/api/snack`;
  }
  
  // Environnement de production Netlify
  if (currentUrl.hostname.includes('netlify.app')) {
    return `${currentUrl.origin}/.netlify/functions/snack`;
  }
  
  // Fallback vers l'URL de production
  return 'https://snackntrack.netlify.app/.netlify/functions/snack';
}
