// idb.js am√©lior√©

function openDB() {
  return new Promise((resolve, reject) => {
    const req = indexedDB.open('snack-db', 1);
    
    req.onerror = () => {
      console.error('‚ùå Erreur lors de l\'ouverture de la base de donn√©es:', req.error);
      reject(req.error);
    };
    
    req.onsuccess = () => {
      console.log('‚úÖ Base de donn√©es ouverte avec succ√®s');
      resolve(req.result);
    };
    
    req.onupgradeneeded = (event) => {
      console.log('üîÑ Mise √† jour de la base de donn√©es');
      const db = event.target.result;
      
      if (!db.objectStoreNames.contains('pending')) {
        const store = db.createObjectStore('pending', { keyPath: 'id' });
        
        // Ajouter des index pour faciliter les requ√™tes
        store.createIndex('timestamp', 'timestamp', { unique: false });
        store.createIndex('synced', 'synced', { unique: false });
        
        console.log('üì¶ Store "pending" cr√©√© avec index');
      }
    };
  });
}

// R√©cup√©rer tous les √©l√©ments en attente
async function getAllPending() {
  try {
    const db = await openDB();
    const tx = db.transaction('pending', 'readonly');
    const store = tx.objectStore('pending');
    
    return new Promise((resolve, reject) => {
      const request = store.getAll();
      request.onsuccess = () => {
        console.log(`üìä ${request.result.length} √©l√©ments en attente r√©cup√©r√©s`);
        resolve(request.result);
      };
      request.onerror = () => reject(request.error);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des √©l√©ments en attente:', error);
    throw error;
  }
}

// Compter le nombre d'√©l√©ments en attente
async function getPendingCount() {
  try {
    const db = await openDB();
    const tx = db.transaction('pending', 'readonly');
    const store = tx.objectStore('pending');
    
    return new Promise((resolve, reject) => {
      const request = store.count();
      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du comptage:', error);
    return 0;
  }
}

// Ajouter un √©l√©ment en attente
async function addPending(snackData) {
  try {
    const db = await openDB();
    const tx = db.transaction('pending', 'readwrite');
    const store = tx.objectStore('pending');
    
    // Ajouter un ID unique si pas pr√©sent
    if (!snackData.id) {
      snackData.id = Date.now().toString();
    }
    
    // Ajouter un timestamp si pas pr√©sent
    if (!snackData.timestamp) {
      snackData.timestamp = new Date().toISOString();
    }
    
    // Marquer comme non synchronis√©
    snackData.synced = false;
    
    return new Promise((resolve, reject) => {
      const request = store.add(snackData);
      request.onsuccess = () => {
        console.log('üíæ Snack ajout√© en attente:', snackData.name);
        resolve(request.result);
      };
      request.onerror = () => {
        console.error('‚ùå Erreur lors de l\'ajout:', request.error);
        reject(request.error);
      };
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout en attente:', error);
    throw error;
  }
}

// Supprimer un √©l√©ment sp√©cifique
async function deletePending(id) {
  try {
    const db = await openDB();
    const tx = db.transaction('pending', 'readwrite');
    const store = tx.objectStore('pending');
    
    return new Promise((resolve, reject) => {
      const request = store.delete(id);
      request.onsuccess = () => {
        console.log('üóëÔ∏è √âl√©ment supprim√©:', id);
        resolve();
      };
      request.onerror = () => reject(request.error);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression:', error);
    throw error;
  }
}

// Vider compl√®tement la table pending
async function clearPending() {
  try {
    const db = await openDB();
    const tx = db.transaction('pending', 'readwrite');
    const store = tx.objectStore('pending');
    
    return new Promise((resolve, reject) => {
      const request = store.clear();
      request.onsuccess = () => {
        console.log('üßπ Table pending vid√©e');
        resolve();
      };
      request.onerror = () => reject(request.error);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du vidage:', error);
    throw error;
  }
}

// R√©cup√©rer un √©l√©ment sp√©cifique par ID
async function getPendingById(id) {
  try {
    const db = await openDB();
    const tx = db.transaction('pending', 'readonly');
    const store = tx.objectStore('pending');
    
    return new Promise((resolve, reject) => {
      const request = store.get(id);
      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration par ID:', error);
    throw error;
  }
}

// Marquer un √©l√©ment comme synchronis√© (optionnel)
async function markAsSynced(id) {
  try {
    const db = await openDB();
    const tx = db.transaction('pending', 'readwrite');
    const store = tx.objectStore('pending');
    
    return new Promise(async (resolve, reject) => {
      // R√©cup√©rer l'√©l√©ment
      const getRequest = store.get(id);
      getRequest.onsuccess = () => {
        const item = getRequest.result;
        if (item) {
          item.synced = true;
          item.syncedAt = new Date().toISOString();
          
          // Mettre √† jour
          const putRequest = store.put(item);
          putRequest.onsuccess = () => {
            console.log('‚úÖ √âl√©ment marqu√© comme synchronis√©:', id);
            resolve();
          };
          putRequest.onerror = () => reject(putRequest.error);
        } else {
          reject(new Error('√âl√©ment non trouv√©'));
        }
      };
      getRequest.onerror = () => reject(getRequest.error);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du marquage:', error);
    throw error;
  }
}

// Fonction utilitaire pour d√©boguer - afficher le contenu de la base
async function debugDB() {
  try {
    const pending = await getAllPending();
    console.table(pending);
    return pending;
  } catch (error) {
    console.error('‚ùå Erreur lors du debug:', error);
  }
}

// Export pour utilisation c√¥t√© client (si modules ES6)
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    openDB,
    getAllPending,
    getPendingCount,
    addPending,
    deletePending,
    clearPending,
    getPendingById,
    markAsSynced,
    debugDB
  };
}