// LES Ã‰TAPES POUR METTRE EN PLACE INDEXEDDB
//  DÃ©finir la structure de la base
// >Dans ton serviceWorker.js, tu vas :

// ouvrir une base nommÃ©e (nomdetaPWA)-db

// avec une version 1

// et crÃ©er un object store appelÃ© pending qui utilise id comme clÃ© primaire.



function openDB() {
  return new Promise((resolve, reject) => {
    //  Ouvrir la base
    const req = indexedDB.______('snack-db', 1); // indice: mÃ©thode pour ouvrir une base

    req.onerror = () => reject(req.error);
    req.onsuccess = () => resolve(req.result);

    // ğŸ“Œ CrÃ©er le store si pas encore fait
    req.onupgradeneeded = () => {
      req.result.______('pending', { keyPath: 'id' }); // indice: mÃ©thode pour crÃ©er le store
    };
  });
}

// Ajouter des donnÃ©es dans pending
// Ensuite tu ajoutes une fonction pour stocker un snack en attente :

// ouvre la DB,

// dÃ©marre une transaction readwrite,

// et ajoute lâ€™objet.



async function savePendingSnack(snackData) {
  const db = await openDB();
  const tx = db.______('pending', 'readwrite'); // indice: crÃ©er une transaction sur le store
  const store = tx.______('pending'); // indice: rÃ©cupÃ©rer le store
  return new Promise((resolve, reject) => {
    const request = store.add(snackData);
    request.onsuccess = () => resolve();
    request.onerror = () => reject(request.error);
  });
}

// > Lire toutes les donnÃ©es en attente

// Pour la synchronisation plus tard, tu as besoin dâ€™une fonction qui lit tout le contenu du store.


async function getAllPending() {
  const db = await openDB();
  return new Promise((resolve, reject) => {
    const request = db.transaction('pending').objectStore('pending').______( ); // indice: mÃ©thode pour tout rÃ©cupÃ©rer
    request.onsuccess = () => resolve(request.result);
    request.onerror = () => reject(request.error);
  });
}
// >VÃ©rifier dans DevTools
// AprÃ¨s avoir ajoutÃ© des participants (offline par exemple), va dans :


// Application > IndexedDB > (nomdetaPWA))-db > pending